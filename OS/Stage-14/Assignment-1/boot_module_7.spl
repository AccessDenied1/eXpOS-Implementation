//Load timer interrupt
loadi(4,17);
loadi(5,18);

//int-7
loadi(16,29);
loadi(17,30);

//load process-1 odd
loadi(65,7);
loadi(66,8);

//int-10
loadi(22,35);
loadi(23,36);

//exception handler
loadi(2, 15);
loadi(3, 16);

//library
loadi(63,13);
loadi(64,14);

//load process-2 even
loadi(84,69);
//load process -3 prime
loadi(85,70);

//load module 5
loadi(50,63);
loadi(51,64);


//For Process -1

PTBR=PAGE_TABLE_BASE+20;


//Library
[PTBR+0] = 63;
[PTBR+1] = "0100";
[PTBR+2] = 64;
[PTBR+3] = "0100";

//Heap
[PTBR+4] = 78;
[PTBR+5] = "0110";
[PTBR+6] = 79;
[PTBR+7] = "0110";

//Code
[PTBR+8] = 65;
[PTBR+9] = "0100";
[PTBR+10] = 66;
[PTBR+11] = "0100";
[PTBR+12] = -1;
[PTBR+13] = "0000";
[PTBR+14] = -1;
[PTBR+15] = "0000";

//Stack
[PTBR+16] = 76;
[PTBR+17] = "0110";
[PTBR+18] = 77;
[PTBR+19] = "0110";


PTLR = 10;

[PROCESS_TABLE +16 + 1] = 1;
[PROCESS_TABLE +16 + 4] = CREATED;
[PROCESS_TABLE +16 + 11] = 80;

[PROCESS_TABLE +16 + 13] = 8*512;

[PROCESS_TABLE +16 + 12] = 0;
[PROCESS_TABLE + 16 + 14] = PAGE_TABLE_BASE + 20;   // PTBR value
[PROCESS_TABLE + 16 + 15] = 10;                  // PTLR value

[76*512] = [65 * 512 + 1];

//For Process -2

PTBR=PAGE_TABLE_BASE+20 +20;


//Library
[PTBR+0] = 63;
[PTBR+1] = "0100";
[PTBR+2] = 64;
[PTBR+3] = "0100";

//Heap
[PTBR+4] = 88;
[PTBR+5] = "0110";
[PTBR+6] = 89;
[PTBR+7] = "0110";

//Code
[PTBR+8] = 84;
[PTBR+9] = "0100";
[PTBR+10] = -1;
[PTBR+11] = "0000";
[PTBR+12] = -1;
[PTBR+13] = "0000";
[PTBR+14] = -1;
[PTBR+15] = "0000";

//Stack
[PTBR+16] = 86;
[PTBR+17] = "0110";
[PTBR+18] = 87;
[PTBR+19] = "0110";


PTLR = 10;

[PROCESS_TABLE +16 +16 + 1] = 2;
[PROCESS_TABLE + 4+16+16] = CREATED;
[PROCESS_TABLE +16+16 + 11] = 90;

[PROCESS_TABLE +16+16 + 13] = 8*512;

[PROCESS_TABLE +16+16 + 12] = 0;
[PROCESS_TABLE + 16+16 + 14] = PAGE_TABLE_BASE + 20 +20;   // PTBR value
[PROCESS_TABLE + 16+16 + 15] = 10;                     // PTLR value

[86*512] = [84 * 512 + 1];


//For Process -3

PTBR=PAGE_TABLE_BASE+60;


//Library
[PTBR+0] = 63;
[PTBR+1] = "0100";
[PTBR+2] = 64;
[PTBR+3] = "0100";

//Heap
[PTBR+4] = 91;
[PTBR+5] = "0110";
[PTBR+6] = 92;
[PTBR+7] = "0110";

//Code
[PTBR+8] = 85;
[PTBR+9] = "0100";
[PTBR+10] = -1;
[PTBR+11] = "0000";
[PTBR+12] = -1;
[PTBR+13] = "0000";
[PTBR+14] = -1;
[PTBR+15] = "0000";

//Stack
[PTBR+16] = 93;
[PTBR+17] = "0110";
[PTBR+18] = 94;
[PTBR+19] = "0110";


PTLR = 10;

[PROCESS_TABLE +48 + 1] = 3;
[PROCESS_TABLE +48 + 4] = CREATED;
[PROCESS_TABLE +48 + 11] = 95;

[PROCESS_TABLE +48 + 13] = 8*512;

[PROCESS_TABLE +48 + 12] = 0;
[PROCESS_TABLE +48 + 14] = PAGE_TABLE_BASE +60;   // PTBR value
[PROCESS_TABLE +48 + 15] = 10;                     // PTLR value

[93*512] = [85 * 512 + 1];



alias i R0;
i = 4;
while( i<16 )
do
[PROCESS_TABLE + 4 +16*i] = TERMINATED;
i = i+1;
endwhile;

return;


