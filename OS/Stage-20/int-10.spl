alias currentPID R10;
currentPID = [SYSTEM_STATUS_TABLE + 1];

alias process_table_entry R11;
process_table_entry = PROCESS_TABLE + 16 * currentPID;
[process_table_entry + 9] = 10;

alias userSP R8;
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 13] = SP;
userSP = SP;
SP = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 11] * 512 - 1;

multipush(R1,R2,R3);
R1 = 3;
call PROCESS_MANAGER;
multipop(R1,R2,R3);

alias newPID R1;
newPID = (currentPID % 15) + 1;

while((newPID != currentPID) && ([PROCESS_TABLE + 16 * newPID + 4] == TERMINATED)) do       // iterate to find new PID
    newPID = (newPID % 15) + 1;
endwhile;

if(newPID == currentPID) then
    halt;
endif;

// If any process other than idle is not TERMINATED, then schedule it
call SCHEDULER;
