
breakpoint;
// Switching to kernel stack from user stack

[PROCESS_TABLE + 16 * [SYSTEM_STATUS_TABLE + 1] + 13] = SP;             // Save current SP into UPTR
SP = [PROCESS_TABLE + 16 * [SYSTEM_STATUS_TABLE + 1] + 11] * 512 - 1;   // set SP to start of Uarea page      
backup;                                                                 // backup all registers into kernel stack

alias currentPID R0;
currentPID = [SYSTEM_STATUS_TABLE + 1];                 // Stores PID of current PROCESS_TABLE

// Set process table values for current process

alias process_table_entry R1;
process_table_entry = PROCESS_TABLE + 16 * currentPID;

[process_table_entry + 12] = SP % 512;                  // offset of kernel stack pointer
[process_table_entry + 14] = PTBR;                      // current PTBR 
[process_table_entry + 15] = PTLR;                      // current PTLR
[process_table_entry + 4] = READY;                      // state of process

alias newPID R2;
newPID = 1 - currentPID;                                // Toggling between processes

// Restoring SP, PTBR, PTLR values of the new process

alias new_process_table R3;
new_process_table = PROCESS_TABLE + 16 * newPID;

SP = [new_process_table + 11] * 512 + [new_process_table + 12]; // Setting SP to kernel stack pointer of new process
PTBR = [new_process_table + 14];                                // Setting PTBR of new process
PTLR = [new_process_table + 15];                                // Setting PTLR of new process

[SYSTEM_STATUS_TABLE + 1] = newPID;                     // Set PID value of running process to newPID

if([new_process_table + 4] == CREATED) then
    [new_process_table + 4] = RUNNING;
    SP = [new_process_table + 13];
    ireturn;
endif;

[process_table_entry + 4] = RUNNING;
restore;
SP = [PROCESS_TABLE + 16 * [SYSTEM_STATUS_TABLE + 1] + 13];     // we cannot use process_table_entry since R1 has been restored


breakpoint;
ireturn;
