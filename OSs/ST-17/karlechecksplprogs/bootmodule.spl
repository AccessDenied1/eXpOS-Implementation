//load init code
loadi(65, 7);
loadi(66, 8);

//load console interrupt routine
loadi(8,21);
loadi(9,22);

//load module 0 resource manager
loadi(40,53);
loadi(41,54);

//load int 9 routine
loadi(20,33);
loadi(21,34);

//load module 1 process manager
loadi(42,55);
loadi(43,56);

//load module 2 memory manager
loadi(44,57);
loadi(45,58);

//load memory copy of inode table
loadi(59,3);
loadi(60,4);

//load module 4 device manger
loadi(48,61);
loadi(49,62);

//load the module 5 scheduler
loadi(50,63);
loadi(51,64);

//load int 10 routine
loadi(22, 35);
loadi(23, 36);

//load int 7 write interrupt routine
loadi(16,29);
loadi(17,30);

//load int 6 read interrupt routine
loadi(14,27);
loadi(15,28);

//load exception handler
loadi(2, 15);
loadi(3, 16);

//load timer interrupt routine
loadi(4, 17);
loadi(5, 18);

//load library
loadi(63,13);
loadi(64,14);

//setting the terminal status as free initially
[TERMINAL_STATUS_TABLE] = 0;

//setting the PTBR reg for init process
PTBR = PAGE_TABLE_BASE + 20;

//setting PTLR reg for init process
PTLR = 10;

//setting page table for init process

//Library
[PTBR+0] = 63;
[PTBR+1] = "0100";
[PTBR+2] = 64;
[PTBR+3] = "0100";

//Heap
[PTBR+4] = 78;
[PTBR+5] = "0110";
[PTBR+6] = 79;
[PTBR+7] = "0110";

//code
[PTBR+8] = 65;
[PTBR+9] = "0100";
[PTBR+10] = 66;
[PTBR+11] = "0100";
[PTBR+12] = -1;
[PTBR+13] = "0000";
[PTBR+14] = -1;
[PTBR+15] = "0000";

//Stack
[PTBR+16] = 76;
[PTBR+17] = "0110";
[PTBR+18] = 77;
[PTBR+19] = "0110";


//setting the process table for init process

//setting pid of init as 1
[PROCESS_TABLE + 17] = 1;

//setting the user stack pointer(UPTR)
[PROCESS_TABLE + 29] = 8*512;

//setting the user area page number for init program
[PROCESS_TABLE + 27] =  80;

//setting the KPTR as 0
[PROCESS_TABLE + 28] = 0;

//setting the status of init program
[PROCESS_TABLE + 20] = CREATED;

//setting the PTBR value in process table
[PROCESS_TABLE + 30] = PAGE_TABLE_BASE + 20;

//setting the PTLR value in the process table
[PROCESS_TABLE + 31] = 10;

//transfer the entry point value from the header of the init process
//to the top of the user stack of the init process
[76*512] = [65*512 + 1];

alias counter R11; 
counter = 2;
while(counter <= 15) do
    [PROCESS_TABLE + counter*16 + 4] = TERMINATED;
	counter = counter + 1;
endwhile;

counter = 0;
while(counter < 83) do
	[MEMORY_FREE_LIST + counter] = 1;
	counter = counter + 1;
endwhile;

while(counter < 129) do
	[MEMORY_FREE_LIST + counter] = 0;
	counter = counter + 1;
endwhile;

[SYSTEM_STATUS_TABLE + 3] = 0;
[SYSTEM_STATUS_TABLE + 2] = 46;

return;
