//load idle code
loadi(69,11);
loadi(70,12);

//load module 7
loadi(54,67);
loadi(55,68);

//initialize SP to the kernal stack of the idle process
SP = 82*512 -1;

//calling the module 7 BOOT_MODULE
call BOOT_MODULE;

//PTBR is set for idle process
PTBR = PAGE_TABLE_BASE;
PTLR = 10;


//setting page table for idle process
//library
[PTBR+0] = 63;
[PTBR+1] = "0100";
[PTBR+2] = 64;
[PTBR+3] = "0100";

//Heap
[PTBR+4] = -1;
[PTBR+5] = "0000";
[PTBR+6] = -1;
[PTBR+7] = "0000";

//Code
[PTBR+8] = 69;
[PTBR+9] = "0100";
[PTBR+10] = 70;
[PTBR+11] = "0100";
[PTBR+12] = -1;
[PTBR+13] = "0000";
[PTBR+14] = -1;
[PTBR+15] = "0000";

//Stack
[PTBR+16] = 81;
[PTBR+17] = "0110";
[PTBR+18] = -1;
[PTBR+19] = "0000";

//setting user area page number as 82 as it is the first free page number
[PROCESS_TABLE + 11] =  82;

//setting the user stack pointer (UPTR)
[PROCESS_TABLE + 13] = 8*512;

//setting the KPTR as 0
[PROCESS_TABLE + 12] = 0;

//setting of status of idle process as running as it will run first
[PROCESS_TABLE + 4] = RUNNING;

//setting pid of the idle process in process table
[PROCESS_TABLE + 1] = 0;

//setting the PTBR of the process table of idle process
[PROCESS_TABLE + 14] = PAGE_TABLE_BASE;

//setting the PTLR for the process table of idle process
[PROCESS_TABLE + 15] = 10;

//setting the current pid to 0 in system status table
[SYSTEM_STATUS_TABLE + 1] = 0;

//transfer entry point value from header of idle process to the top 
//of user stack of idle process
[81 * 512] = [69*512 + 1];

//setting SP to logical address of user stack
SP = 8*512;

ireturn;
