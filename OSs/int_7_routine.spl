// Set MODE FLAG to system call number
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 5;

// Store user SP to a register
alias userSP R0;
userSP = SP;

// Switch to Kernel Stack

// Save SP value in UPTR entry of current process
// in the process table
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 13] = SP;

// Set SP to point to kernel stack
SP = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 11] * 512 - 1;

// Get first argument - file descriptor
alias fileDescriptor R1;
fileDescriptor = [[PTBR + 2 * ((userSP - 4) / 512)] * 512 + ((userSP - 4) % 512)];

if(fileDescriptor != -2)
then
    [[PTBR + 2 * ((userSP - 1) / 512)] * 512 + ((userSP - 1) % 512)] = -1;
else
    // Get second argument - word to be printed
    alias word R5;
    word = [[PTBR + 2 * ((userSP - 3) / 512)] * 512 + ((userSP - 3) % 512)];

    // print the word
    print word;

    // Set the return value to 0 to indicate success
    [[PTBR + 2 * ((userSP - 1) / 512)] * 512 + ((userSP - 1) % 512)] = 0;
endif;

// Set value of SP to user stack top
SP = userSP;

// Set MODE FLAG to 0 to indicate user mode
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 0;

// Pass control back to user program
ireturn;